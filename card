/*
Shuffle-O-Matic
12:48

다이얼이 있습니다. 다이얼의 숫자에 따라 카드를 섞어주는 방식이 다릅니다.
숫자의 범위는 다음과 같습니다.
6장의 숫자 카드의 기계에 대한 다이얼에 다른 카드 섞기 예 입니다.
주어진 카드를 오름차순 또는 내림차순으로 정렬될 수 있는 최소 셔플 횟수를 구하세요.
셔플을 통해 정렬할 수 없거나 셔플 횟수가 5회를 초과할 경우 -1을 출력합니다.
카드의 개수는 짝수로 입력되고 엔은 4~12사이입니다.


반절로 나누고,
12 / 34

1 2 3 4
1 3 2 4

3 1 4 2
3 4 1 2

5회까지 가능하니까
순열인가요? 순열이네 순서가 있으니까
0 이면 안섞는 것이니 오께이

5까지 순열입니다.
순열을 만들면서 체크하면 되겠습니다. 중복가능 순열

1. 나누는 방법에 대해서 자동으로 만들어지는 함수 ->
2. 섞기전에 카드상태, 섞고 난 후에 카드 상태, 리턴하면 복원하는 함수
3. 내림차순, 오름차순 검사하는 함수
*/

#include <iostream>
#include <algorithm>
using namespace std;

#define SIZE 8 //
int visit[SIZE];
int printArr[SIZE];
int N;
int ans=2123456789;
int cardArr[SIZE];
int flag;

void problemIn() {
	cin >> N;
	for (int i = 0; i < N; i++) {
		cin >> cardArr[i];
	}
}
/*

*/
void mix(int num, int mixNum) {

	int mid = N / 2;
	for (int i = 1; i <= num; i++) {
		int k = i;
		for (int j = 1; j <= i; j++) {
			swap(cardArr[mid - k], cardArr[mid - k + 1]);
			k -= 2;
		}
	}

	bool isSatisfied;
	sort(cardArr, cardArr + N);
	for (int i = 0; i < N; i++) {
		if (cardArr[i] == i + 1) {
			isSatisfied = true;
		}
		else {
			isSatisfied = false;
			break;
		}
	}
	if (isSatisfied) {
		ans = min(ans, mixNum);
		flag = 1;
	}
}

void copy_arr(int a[SIZE], int b[SIZE]) {
	for (int i = 0; i < SIZE; i++)
		b[i] = a[i];
}

void perm(int depth, int length) {

	if (flag) return;

	if (depth == length) {
		//for (int i = 0; i < length; i++) {
		//   cout << printArr[i] << " ";
		//}
		//cout << endl;
		return;
	}

	int card_store[SIZE];
	copy_arr(cardArr, card_store);

	for (int i = 0; i < 5; i++) {
		printArr[depth] = i;
		if (i == 0) {
			mix(i, depth);
		}
		else{mix(i, depth + 1);}
		perm(depth + 1, length);
		copy_arr(card_store, cardArr);
	}
}


int main() {

	int T;
	cin >> T;
	for (int tc = 1; tc <= T; tc++) {
		problemIn();
		for (int i = 1; i <= 5; i++) {
			perm(0, i);
		}
		if (ans == 2123456789) ans = -1;
		cout << "#" << tc << " " << ans << endl;
	}

	//cin >> N;
	//perm(0, 2);
	return 0;
}
